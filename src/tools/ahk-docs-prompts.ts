import { z } from "zod";
import logger from "../logger.js";
import {
  getPromptSlug,
  insertPromptIntoModule,
  loadPromptsFromModules,
  type ModulePrompt
} from "./ahk-docs-modules.js";

export interface PromptTemplate {
  title: string;
  body: string;
  source: "default" | "module";
  module?: string;
  slug: string;
}

export const AhkPromptsArgsSchema = z.object({});

export const ahkPromptsToolDefinition = {
  name: "ahk_prompts",
  description: `AHK Prompts
Returns a set of built-in AHK v2 prompt templates for code generation and learning.`,
  inputSchema: {
    type: "object",
    properties: {},
    required: []
  }
};

export const DEFAULT_PROMPTS: PromptTemplate[] = [
  {
    title: "Auto Context",
    body: "Jumpstart conversations by immediately calling `ahk_context_injector`.\n- Paste the user request into `userPrompt`\n- Leave `contextType` as `auto` unless you know the specific category\n- Set `includeModuleInstructions` to `true` to pull module expertise\n\nAfter the tool returns contextual snippets, review them before generating code.",
    source: "default",
    slug: getPromptSlug("Auto Context")
  },
  {
    title: "Clipboard Editor",
    body: "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text\n- Save the newly edited version to the users clipboard",
    source: "default",
    slug: getPromptSlug("Clipboard Editor")
  },
  {
    title: "Link Manager",
    body: "Create an AutoHotkey v2 script called **Link Manager** that:\n- Stores a multiline string `g_Links` containing several URLs\n- Parses that string on startup into an array with fields `url`, `valid`, and `displayName`\n- Builds a GUI with a ListView (or ListBox) showing each link and a status bar for details\n- Opens the selected link in Microsoft Edge on double-click or Enter, adding https:// if missing (fallback to default browser if Edge fails)\n- Validates URLs with a regex pattern\n- Handles errors such as empty list or invalid URL and shows tooltips or status messages\n- Uses clean AHK v2 syntax, modular functions, and proper event binding",
    source: "default",
    slug: getPromptSlug("Link Manager")
  },
  {
    title: "Snippet Manager",
    body: "Create an AutoHotkey v2 script for a Snippet Manager tool with the following features:\n- Store a collection of predefined text snippets (like greetings, closings, reminders)\n- Display them in a listbox GUI\n- Allow copying the selected snippet to clipboard\n- Option to send the snippet directly to the previous active window\n- Show temporary tooltips for user feedback\n\nAdditional Requirements:\n- Store snippets in a static Map\n- Track the previously active window\n- Have a clean, resizable GUI\n- Display tooltips that automatically disappear\n\nInclude these specific snippets: \"Greeting\", \"Closing\", \"Reminder\", and \"Follow-up\" with appropriate text content for each.\nMake sure to follow AutoHotkey v2 best practices with proper event binding, control management, and variable scoping.",
    source: "default",
    slug: getPromptSlug("Snippet Manager")
  },
  {
    title: "Layout Debugger",
    body: [
      '---',
      'name: ahk-gui-layout (AHK_OOP MCP inject)',
      'description: GUI layout specialist inject for the AHK_OOP AutoHotkey v2 coding agent and MCP tools. Handles mathematical positioning, GuiForm helper patterns, spatial reasoning, and layout debugging. This inject can be loaded independently without any router dependency.',
      'agent: AHK_OOP',
      'mcp: true',
      'type: inject-module',
      'activation: Auto-activate when GUI layout keywords, positioning issues, or visual hierarchy requirements are detected, or when contextType is set to gui-layout',
      'color: green',
      '---',
      '',
      '# AHK_OOP MCP Inject: GUI Layout Specialist',
      '',
      'This inject equips the AHK_OOP agent with expert GUI layout implementation for AutoHotkey v2 GUIs.',
      '',
      '## Integration Protocol',
      '',
      '### Activation Triggers',
      'Activate this inject when detecting:',
      '- GUI creation requests with layout requirements',
      '- Control positioning or overlap problems',
      '- Spacing, alignment, or visual hierarchy needs',
      '- GuiForm helper implementation',
      '- Layout debugging or audit requests',
      '',
      '### Integration with AHK_OOP and MCP',
      'Within the AHK_OOP agent and MCP environment:',
      '- Accept GUI layout tasks from the calling context or tools',
      '- Apply specialized layout algorithms while maintaining AHK_OOP coding standards',
      '- Return properly formatted AutoHotkey v2 code compatible with the agent output',
      '- Follow AHK_OOP conventions for code style, commenting, and error handling',
      '',
      '## Core Expertise',
      '',
      '### Mathematical Positioning System',
      '- ALWAYS use sequential Y-position tracking with currentY variables',
      '- Calculate every position mathematically: `nextY = currentY + height + pad`',
      '- Use a single `pad` variable for consistent spacing (10px preferred, 5px for compact)',
      '- NEVER use hard-coded Y values',
      '- Validate that window height equals `currentY + pad` at the end',
      '',
      '### GuiForm Helper Implementation',
      'Use this concise helper function for readable position strings:',
      '`ahk',
      '; Simple helper to format GUI control position and size with optional flags',
      'GuiForm(x, y, w, h, extraParams := "") {',
      '    params := Format("x{} y{} w{} h{}", x, y, w, h)',
      '    return extraParams ? params " " extraParams : params',
      '}',
      '`',
      '',
      'Why GuiForm:',
      '- More readable than string concatenation',
      '- Cleaner than a builder pattern for most uses',
      '- Makes layout math visible and maintainable',
      '- Reduces code verbosity while keeping clarity',
      '- Perfect for the mathematical positioning system',
      '',
      '### Layout Foundation Pattern',
      'Start every GUI with this unified padding structure:',
      '`ahk',
      'CreateGUI() {',
      '    gui := Gui("+Resize", "Title")',
      '',
      '    ; Single padding variable for ALL spacing',
      '    pad := 10  ; Use 10px everywhere, or 5px for compact layouts',
      '    currentY := pad',
      '    windowWidth := 650',
      '    contentWidth := windowWidth - (pad * 2)',
      '',
      '    ; Build GUI with mathematical positioning',
      '    ; ... controls here using GuiForm() ...',
      '',
      '    ; Show with calculated height',
      '    gui.Show(Format("w{} h{}", windowWidth, currentY + pad))',
      '    return gui',
      '}',
      '`',
      '',
      'Universal Padding Principle:',
      '- `pad` is used for ALL spacing: margins, gaps, control spacing',
      '- Window margins: `pad` pixels from all edges',
      '- Control spacing: `pad` pixels between controls',
      '- Column gaps: `pad` pixels between columns',
      '- Group padding: `pad` pixels inside groups',
      '',
      '## Layout Methodology',
      '',
      '### Spatial Planning Process',
      'Before writing code, perform spatial analysis:',
      '',
      '1. Layout Analysis',
      '   - PURPOSE: What workflow does this window support',
      '   - CONTROLS: What controls are needed and how do they relate',
      '   - HIERARCHY: What is primary, secondary, tertiary',
      '   - CONSTRAINTS: Window size limits and content requirements',
      '',
      '2. Mathematical Planning',
      '   - PAD VALUE: Choose 10px standard or 5px compact',
      '   - WINDOW_SIZE: Calculate based on content needs',
      '   - CONTENT_WIDTH: Always `windowWidth - (pad * 2)`',
      '   - SPACING_RHYTHM: Everything uses `pad` or multiples of `pad`',
      '',
      '3. Position Calculation',
      '   For each control:',
      '   - X position: `pad` for left-aligned, calculated for columns',
      '   - Y position: Always use `currentY`',
      '   - Width: Based on `contentWidth` or column calculations',
      '   - Height: Based on control type and content',
      '   - Advance: `currentY += height + pad` after each control',
      '',
      '### Core Control Patterns with GuiForm',
      '',
      'Single Control:',
      '`ahk',
      '; Title text',
      'titleText := gui.Add("Text", GuiForm(pad, currentY, contentWidth, 25), "Application Title")',
      'currentY += 25 + pad',
      '',
      '; Input field',
      'inputEdit := gui.Add("Edit", GuiForm(pad, currentY, contentWidth, 100, "Multi"), "")',
      'currentY += 100 + pad',
      '',
      '; Single button',
      'btn := gui.Add("Button", GuiForm(pad, currentY, 100, 30), "Click Me")',
      'currentY += 30 + pad',
      '`',
      '',
      'Side-by-Side Controls:',
      '`ahk',
      '; Two columns with pad as gap',
      'leftWidth := (contentWidth - pad) / 2',
      'rightX := pad + leftWidth + pad',
      '',
      'leftList := gui.Add("ListView", GuiForm(pad, currentY, leftWidth, 200), "Left Column")',
      'rightList := gui.Add("ListView", GuiForm(rightX, currentY, leftWidth, 200), "Right Column")',
      'currentY += 200 + pad',
      '`',
      '',
      'Multiple Equal Columns:',
      '`ahk',
      'numColumns := 3',
      'totalGaps := pad * (numColumns - 1)',
      'colWidth := (contentWidth - totalGaps) / numColumns',
      '',
      'Loop numColumns {',
      '    x := pad + (A_Index - 1) * (colWidth + pad)',
      '    gui.Add("ListView", GuiForm(x, currentY, colWidth, 150), "Column " . A_Index)',
      '}',
      'currentY += 150 + pad',
      '`',
      '',
      '### Button Row Patterns with GuiForm',
      '',
      'Right-Aligned Buttons:',
      '`ahk',
      'buttons := ["OK", "Cancel", "Apply"]',
      'btnWidth := 100',
      'btnHeight := 30',
      '',
      'totalWidth := buttons.Length * btnWidth + (buttons.Length - 1) * pad',
      'startX := windowWidth - pad - totalWidth',
      '',
      'for i, btn in buttons {',
      '    x := startX + (i - 1) * (btnWidth + pad)',
      '    gui.Add("Button", GuiForm(x, currentY, btnWidth, btnHeight), btn)',
      '}',
      'currentY += btnHeight + pad',
      '`',
      '',
      'Centered Buttons:',
      '`ahk',
      'totalWidth := buttons.Length * btnWidth + (buttons.Length - 1) * pad',
      'startX := (windowWidth - totalWidth) / 2',
      '',
      'for i, btn in buttons {',
      '    x := startX + (i - 1) * (btnWidth + pad)',
      '    gui.Add("Button", GuiForm(x, currentY, btnWidth, btnHeight), btn)',
      '}',
      'currentY += btnHeight + pad',
      '`',
      '',
      'Distributed Buttons:',
      '`ahk',
      'btnCount := buttons.Length',
      'btnWidth := (contentWidth - pad * (btnCount - 1)) / btnCount',
      '',
      'for i, btn in buttons {',
      '    x := pad + (i - 1) * (btnWidth + pad)',
      '    gui.Add("Button", GuiForm(x, currentY, btnWidth, btnHeight), btn)',
      '}',
      'currentY += btnHeight + pad',
      '`',
      '',
      '### GroupBox Pattern with Consistent Padding',
      '`ahk',
      '; GroupBox with nested controls using same pad',
      'groupHeight := 150  ; Calculate based on contents',
      'group := gui.Add("GroupBox", GuiForm(pad, currentY, contentWidth, groupHeight), "Settings")',
      '',
      '; Inner positioning - use same pad inside groups',
      'innerY := currentY + 25  ; Account for group title',
      'innerX := pad + pad  ; Double pad from left edge',
      'innerWidth := contentWidth - (pad * 2)',
      '',
      '; Controls inside group',
      'gui.Add("Text", GuiForm(innerX, innerY, innerWidth, 23), "Option 1:")',
      'innerY += 23 + pad',
      '',
      'gui.Add("Edit", GuiForm(innerX, innerY, innerWidth, 23), "")',
      'innerY += 23 + pad',
      '',
      'gui.Add("CheckBox", GuiForm(innerX, innerY, innerWidth, 23), "Enable feature")',
      'innerY += 23 + pad',
      '',
      '; Advance main currentY past the group',
      'currentY += groupHeight + pad',
      '`',
      '',
      '### Complete Example with GuiForm',
      '`ahk',
      'CreateSettingsGUI() {',
      '    gui := Gui("+Resize", "Settings")',
      '',
      '    ; Universal padding',
      '    pad := 10',
      '    currentY := pad',
      '    windowWidth := 500',
      '    contentWidth := windowWidth - (pad * 2)',
      '',
      '    ; Title',
      '    gui.Add("Text", GuiForm(pad, currentY, contentWidth, 25, "+Center"), "Application Settings")',
      '    gui.SetFont("s12 Bold")',
      '    currentY += 25 + pad * 2  ; Double pad after title for emphasis',
      '    gui.SetFont("s9 Norm")',
      '',
      '    ; Name input',
      '    gui.Add("Text", GuiForm(pad, currentY, 80, 23), "Name:")',
      '    gui.Add("Edit", GuiForm(pad + 80 + pad, currentY, contentWidth - 80 - pad, 23, "vName"), "")',
      '    currentY += 23 + pad',
      '',
      '    ; Email input',
      '    gui.Add("Text", GuiForm(pad, currentY, 80, 23), "Email:")',
      '    gui.Add("Edit", GuiForm(pad + 80 + pad, currentY, contentWidth - 80 - pad, 23, "vEmail"), "")',
      '    currentY += 23 + pad',
      '',
      '    ; Options group',
      '    groupHeight := 100',
      '    gui.Add("GroupBox", GuiForm(pad, currentY, contentWidth, groupHeight), "Options")',
      '',
      '    innerY := currentY + 20',
      '    gui.Add("CheckBox", GuiForm(pad * 2, innerY, contentWidth - pad * 2, 23, "vAutoSave"), "Auto-save")',
      '    innerY += 23 + pad',
      '',
      '    gui.Add("CheckBox", GuiForm(pad * 2, innerY, contentWidth - pad * 2, 23, "vNotifications"), "Enable notifications")',
      '    innerY += 23 + pad',
      '',
      '    gui.Add("CheckBox", GuiForm(pad * 2, innerY, contentWidth - pad * 2, 23, "vDarkMode"), "Dark mode")',
      '',
      '    currentY += groupHeight + pad * 2  ; Extra pad before buttons',
      '',
      '    ; Button row - right aligned',
      '    btnWidth := 80',
      '    btnHeight := 28',
      '    buttons := ["OK", "Cancel", "Apply"]',
      '',
      '    totalWidth := buttons.Length * btnWidth + (buttons.Length - 1) * pad',
      '    startX := windowWidth - pad - totalWidth',
      '',
      '    for i, btnText in buttons {',
      '        x := startX + (i - 1) * (btnWidth + pad)',
      '        btn := gui.Add("Button", GuiForm(x, currentY, btnWidth, btnHeight), btnText)',
      '        if (btnText = "OK")',
      '            btn.OnEvent("Click", (*) => gui.Submit())',
      '        else if (btnText = "Cancel")',
      '            btn.OnEvent("Click", (*) => gui.Close())',
      '    }',
      '    currentY += btnHeight + pad',
      '',
      '    ; Show with calculated height',
      '    gui.Show(Format("w{} h{}", windowWidth, currentY))',
      '    return gui',
      '}',
      '`',
      '',
      '### Visual Hierarchy with Padding',
      '- PRIMARY elements: Full width, use `pad * 2` after for emphasis',
      '- SECONDARY elements: Standard `pad` spacing',
      '- TERTIARY elements: Can use same `pad` or group tightly',
      '- Sections: Use `pad * 2` between major sections',
      '',
      '## Layout Validation Process',
      '',
      '### The Padding Audit',
      'Before finalizing any GUI:',
      '- Single `pad` variable defined 10px or 5px',
      '- All margins use `pad`',
      '- All control spacing uses `pad`',
      '- All gaps use `pad`',
      '- Window dimensions account for `pad` on all sides',
      '- currentY tracking uses `pad` consistently',
      '- GuiForm() used for all positioning',
      '',
      '### Common Issues and Fixes',
      '',
      'Inconsistent Spacing:',
      '- Solution: Use ONLY the `pad` variable',
      '- Never mix different spacing values',
      '- Use `pad * 2` only for major section breaks',
      '',
      'Controls Too Cramped:',
      '- Switch from `pad := 5` to `pad := 10`',
      '- Add `pad * 2` between sections',
      '- Increase window width if needed',
      '',
      'Misaligned Labels and Inputs:',
      '`ahk',
      '; Aligned label-input pairs',
      'labelWidth := 80',
      'gui.Add("Text", GuiForm(pad, currentY, labelWidth, 23), "Label:")',
      'gui.Add("Edit", GuiForm(pad + labelWidth + pad, currentY, contentWidth - labelWidth - pad, 23), "")',
      'currentY += 23 + pad',
      '`',
      '',
      '## Output Requirements',
      '',
      '### Code Delivery Standards',
      'Aligned with AHK_OOP standards, provide:',
      '1. GuiForm helper function definition',
      '2. Single `pad` variable for ALL spacing',
      '3. Mathematical positioning using `currentY`',
      '4. GuiForm() for every control position',
      '5. Calculated window dimensions',
      '6. Clear comments on layout decisions',
      '7. Consistent padding throughout',
      '',
      '### Quality Constraints',
      'Never:',
      '- Use hard-coded spacing values',
      '- Mix different spacing values',
      '- Skip the GuiForm() helper',
      '- Create inconsistent gaps',
      '- Forget padding in calculations',
      '- Use complex positioning when GuiForm() would work',
      '',
      '## Response Format',
      '',
      'When creating GUIs:',
      '',
      '1. Define the GuiForm Helper',
      '   `ahk',
      '   ; Simple helper to format GUI control position and size with optional flags',
      '   GuiForm(x, y, w, h, extraParams := "") {',
      '       params := Format("x{} y{} w{} h{}", x, y, w, h)',
      '       return extraParams ? params " " extraParams : params',
      '   }',
      '   `',
      '',
      '2. Establish Padding System',
      '   `ahk',
      '   pad := 10  ; Universal padding for the entire GUI',
      '   currentY := pad',
      '   windowWidth := [calculated based on content]',
      '   contentWidth := windowWidth - (pad * 2)',
      '   `',
      '',
      '3. Build with GuiForm',
      '   - Every control uses GuiForm()',
      '   - Every spacing uses `pad`',
      '   - Clear mathematical progression',
      '',
      '## Success Criteria',
      '',
      'GUI layouts must:',
      '- Use a single `pad` variable throughout',
      '- Apply GuiForm() for all positioning',
      '- Look professionally spaced and balanced',
      '- Have zero overlapping controls',
      '- Be easily adjustable by changing `pad`',
      '- Integrate seamlessly with AHK_OOP outputs and MCP tools',
      '- Run without errors in AutoHotkey v2',
      '',
      'This inject ensures every GUI produced under AHK_OOP and MCP exhibits professional layout quality with consistent padding, readable GuiForm calls, and maintainable mathematical positioning.'
    ].join('\n'),
    source: "default",
    slug: getPromptSlug("Layout Debugger")
  },
  {
    title: "AHK v2 Debug Assistant",
    body: [
      'I need help debugging my AutoHotkey v2 script. Please apply the systematic debug checklist:',
      '',
      'ERROR MESSAGE: [paste exact error here]',
      'ERROR LINE: [paste the line with the arrow marker]',
      '',
      '## SYSTEMATIC DEBUG CHECKLIST',
      '',
      '### 1. Object Literal Elimination',
      'Check for `{key: value}` patterns → Replace ALL with `Map("key", "value")`',
      '',
      '### 2. Variable Scope Verification',
      'Check every variable is declared → Add `global` or declare locally',
      '',
      '### 3. Method Declaration Verification',
      'Check all called methods exist → Add missing methods or fix typos',
      '',
      '### 4. Parameter Count Validation',
      'Check function calls match definitions → Fix argument count',
      '',
      '### 5. Assignment Operator Check',
      'Check using `:=` for assignment → Replace `=` with `:=`',
      '',
      '### 6. Event Handler Binding',
      'Check handlers use `.Bind(this)` → Add binding to callbacks',
      '',
      '### 7. Class Instantiation',
      'Check no "new" keyword → Remove "new" before class names',
      '',
      '### 8. Map Constructor Commas',
      'Check Map() has all commas → Add missing commas between items',
      '',
      '### 9. Fat Arrow Usage',
      'Check `=>` only for single-line → Use regular syntax for multi-line',
      '',
      '### 10. Property Access',
      'Check properties exist → Use `HasProp()` or define property',
      '',
      '## TOP 5 ERROR QUICK FIXES',
      '',
      '**"Missing propertyname in object literal"**',
      '→ Check for missing commas in Map() or remove object literals',
      '',
      '**"Variable has not been assigned a value"**',
      '→ Declare variable before use or check scope',
      '',
      '**"This method does not exist"**',
      '→ Verify method name spelling and class definition',
      '',
      '**"Too many parameters passed"**',
      '→ Check function documentation for correct count',
      '',
      '**"Expected a String but got Array"**',
      '→ Check data types being passed to functions',
      '',
      '## DEBUG HELPERS',
      '```ahk',
      '; Add debug output',
      'OutputDebug("CHECKPOINT: " . A_LineNumber . " - var=" . value)',
      '',
      '; Check data type',
      'MsgBox(Type(variable))',
      '',
      '; Isolate problem',
      'try {',
      '    ; suspicious code',
      '} catch Error as e {',
      '    MsgBox(e.Message . "`nLine: " . e.Line)',
      '}',
      '```',
      '',
      'Show me the exact fix with before/after code.'
    ].join('\n'),
    source: "default",
    slug: getPromptSlug("Debugging Assistant")
  }
];


export const PROMPTS = DEFAULT_PROMPTS;

export async function getPromptCatalog(): Promise<PromptTemplate[]> {
  const catalogue = new Map<string, PromptTemplate>();

  const addPrompt = (prompt: PromptTemplate) => {
    const key = prompt.title.trim().toLowerCase();
    if (!key) {
      return;
    }

    catalogue.set(key, prompt);
  };

  DEFAULT_PROMPTS.forEach(addPrompt);

  const modulePrompts: ModulePrompt[] = await loadPromptsFromModules();
  for (const modulePrompt of modulePrompts) {
    addPrompt({
      title: modulePrompt.title,
      body: modulePrompt.body,
      module: modulePrompt.module,
      source: "module",
      slug: modulePrompt.slug
    });
  }

  return Array.from(catalogue.values());
}

export { insertPromptIntoModule, loadPromptsFromModules, getPromptSlug };
export type { ModulePrompt };

export class AhkPromptsTool {
  async execute() {
    logger.info("Returning AutoHotkey prompt templates");
    const prompts = await getPromptCatalog();

    const promptText =
      "## Built-in AHK v2 Prompts\n" +
      prompts
        .map((prompt, index) => {
          const moduleDescriptor = prompt.source === "module" && prompt.module ? ` (docs/Modules/${prompt.module})` : "";
          return `### ${index + 1}. ${prompt.title || "Prompt"}${moduleDescriptor}\n${prompt.body}\n`;
        })
        .join("\n");

    return {
      content: [
        {
          type: "text",
          text: promptText
        }
      ]
    };
  }
}
