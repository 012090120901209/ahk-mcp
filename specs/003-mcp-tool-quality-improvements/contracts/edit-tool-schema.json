{
  "name": "AHK_File_Edit",
  "description": "Primary tool for direct AutoHotkey file editing operations: search/replace text, insert at lines, delete ranges, or replace all occurrences. Supports regex patterns, automatic backups, optional script execution after edit, and dry-run preview mode.",
  "version": "2.0.0",
  "changelog": {
    "2.0.0": "Added newContent parameter (content deprecated), added dryRun mode, enhanced descriptions with examples"
  },
  "inputSchema": {
    "type": "object",
    "properties": {
      "action": {
        "type": "string",
        "enum": ["replace", "insert", "delete", "append", "prepend"],
        "default": "replace",
        "description": "Edit action to perform"
      },
      "search": {
        "type": "string",
        "description": "Text to search for (required for replace/delete actions)",
        "examples": [
          "oldClassName",
          "function\\s+\\w+\\(",
          "// TODO: fix this"
        ]
      },
      "newContent": {
        "type": "string",
        "description": "Text to insert or replace with. Use this for all write operations.",
        "examples": [
          "newClassName",
          "class MyClass {\n    __New() {\n        this.value := 0\n    }\n}",
          "function ProcessData(data) {\n    return data.Length\n}"
        ]
      },
      "content": {
        "type": "string",
        "deprecated": true,
        "description": "‚ö†Ô∏è DEPRECATED: Use 'newContent' instead. This parameter is maintained for backward compatibility only and will be removed in v3.0.0."
      },
      "line": {
        "type": "number",
        "description": "Line number for insert/delete operations (1-based index)",
        "minimum": 1
      },
      "startLine": {
        "type": "number",
        "description": "Start line for range operations (1-based)",
        "minimum": 1
      },
      "endLine": {
        "type": "number",
        "description": "End line for range operations (1-based)",
        "minimum": 1
      },
      "filePath": {
        "type": "string",
        "description": "Path to .ahk file to edit. Defaults to active file if not specified.",
        "pattern": "\\.ahk$"
      },
      "regex": {
        "type": "boolean",
        "default": false,
        "description": "Treat 'search' parameter as regular expression"
      },
      "all": {
        "type": "boolean",
        "default": false,
        "description": "Replace all occurrences (not just first match)"
      },
      "backup": {
        "type": "boolean",
        "default": true,
        "description": "Create .bak backup file before editing"
      },
      "runAfter": {
        "type": "boolean",
        "description": "Execute the script after successful edit"
      },
      "dryRun": {
        "type": "boolean",
        "default": false,
        "description": "Preview changes without modifying file. Shows affected lines, change count, and sample diffs."
      }
    },
    "required": [],
    "examples": [
      {
        "description": "Replace first occurrence of text",
        "value": {
          "action": "replace",
          "search": "oldClassName",
          "newContent": "newClassName",
          "filePath": "script.ahk"
        }
      },
      {
        "description": "Replace all occurrences with regex",
        "value": {
          "action": "replace",
          "search": "class\\s+(\\w+)",
          "newContent": "class Refactored$1",
          "regex": true,
          "all": true
        }
      },
      {
        "description": "Preview batch replacement (dry-run)",
        "value": {
          "action": "replace",
          "search": "DarkMode",
          "newContent": "ThemeMode",
          "all": true,
          "dryRun": true
        }
      },
      {
        "description": "Insert new method at specific line",
        "value": {
          "action": "insert",
          "line": 45,
          "newContent": "    MyMethod() {\n        return this.value\n    }"
        }
      }
    ]
  },
  "outputSchema": {
    "type": "object",
    "properties": {
      "content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": { "const": "text" },
            "text": { "type": "string" }
          }
        }
      },
      "isError": {
        "type": "boolean",
        "description": "True if operation failed"
      }
    }
  },
  "outputExamples": {
    "success": {
      "content": [
        {
          "type": "text",
          "text": "‚úÖ **Edit Successful**\n\nüìÑ **File:** script.ahk\n‚öôÔ∏è **Operation:** Replaced first occurrence of \"oldText\" with \"newText\"\n\n**Statistics:**\n- Lines before: 120\n- Lines after: 120\n\nüíæ Backup saved as: script.ahk.bak"
        }
      ]
    },
    "dryRun": {
      "content": [
        {
          "type": "text",
          "text": "üî¨ **DRY RUN - No changes made**\n\nüìÑ **File:** script.ahk\n‚öôÔ∏è **Operation:** Replace all occurrences\n\n**Would change** (showing first 3 of 15):\n1. Line 12:  mode := \"DarkMode\"  ‚Üí  mode := \"ThemeMode\"\n2. Line 34:  if (DarkMode)  ‚Üí  if (ThemeMode)\n3. Line 67:  InitDarkMode()  ‚Üí  InitThemeMode()\n\n**Summary:**\n- 1 file affected\n- 15 occurrences would be replaced\n- Total characters changed: +135 -120\n\n‚ö†Ô∏è DRY RUN: File was NOT modified"
        }
      ]
    },
    "error": {
      "content": [
        {
          "type": "text",
          "text": "‚ùå Error: Text not found: \"nonexistentText\""
        }
      ],
      "isError": true
    }
  },
  "parameterPriority": {
    "note": "When both 'content' and 'newContent' are provided, 'newContent' takes precedence",
    "rule": "newContent || content"
  }
}
